diff a/gdb/nat/linux-osdata.c b/gdb/nat/linux-osdata.c	(rejected hunks)
@@ -282,114 +278,83 @@ get_cores_used_by_process (PID_T pid, int *cores, const int num_cores)
   return task_count;
 }
 
-static LONGEST
-linux_xfer_osdata_processes (gdb_byte *readbuf,
-			     ULONGEST offset, ULONGEST len)
+static void
+linux_xfer_osdata_processes (struct buffer *buffer)
 {
-  /* We make the process list snapshot when the object starts to be read.  */
-  static const char *buf;
-  static LONGEST len_avail = -1;
-  static struct buffer buffer;
+  DIR *dirp;
 
-  if (offset == 0)
-    {
-      DIR *dirp;
+  buffer_grow_str (buffer, "<osdata type=\"processes\">\n");
 
-      if (len_avail != -1 && len_avail != 0)
-	buffer_free (&buffer);
-      len_avail = 0;
-      buf = NULL;
-      buffer_init (&buffer);
-      buffer_grow_str (&buffer, "<osdata type=\"processes\">\n");
+  dirp = opendir ("/proc");
+  if (dirp)
+    {
+      const int num_cores = sysconf (_SC_NPROCESSORS_ONLN);
+      struct dirent *dp;
 
-      dirp = opendir ("/proc");
-      if (dirp)
+      while ((dp = readdir (dirp)) != NULL)
 	{
-	  const int num_cores = sysconf (_SC_NPROCESSORS_ONLN);
-	  struct dirent *dp;
+	  PID_T pid;
+	  uid_t owner;
+	  char user[UT_NAMESIZE];
+	  char *command_line;
+	  int *cores;
+	  int task_count;
+	  char *cores_str;
+	  int i;
 
-	  while ((dp = readdir (dirp)) != NULL)
-	    {
-	      PID_T pid;
-	      uid_t owner;
-	      char user[UT_NAMESIZE];
-	      char *command_line;
-	      int *cores;
-	      int task_count;
-	      char *cores_str;
-	      int i;
-
-	      if (!isdigit (dp->d_name[0])
-		  || NAMELEN (dp) > MAX_PID_T_STRLEN)
-		continue;
+	  if (!isdigit (dp->d_name[0])
+	      || NAMELEN (dp) > MAX_PID_T_STRLEN)
+	    continue;
 
-	      sscanf (dp->d_name, "%lld", &pid);
-	      command_line = commandline_from_pid (pid);
-
-	      if (get_process_owner (&owner, pid) == 0)
-		user_from_uid (user, sizeof (user), owner);
-	      else
-		strcpy (user, "?");
-
-	      /* Find CPU cores used by the process.  */
-	      cores = XCNEWVEC (int, num_cores);
-	      task_count = get_cores_used_by_process (pid, cores, num_cores);
-	      cores_str = (char *) xcalloc (task_count, sizeof ("4294967295") + 1);
-
-	      for (i = 0; i < num_cores && task_count > 0; ++i)
-		if (cores[i])
-		  {
-		    char core_str[sizeof ("4294967295")];
-
-		    sprintf (core_str, "%d", i);
-		    strcat (cores_str, core_str);
-
-		    task_count -= cores[i];
-		    if (task_count > 0)
-		      strcat (cores_str, ",");
-		  }
-
-	      xfree (cores);
-	      
-	      buffer_xml_printf (
-		  &buffer,
-		  "<item>"
-		  "<column name=\"pid\">%lld</column>"
-		  "<column name=\"user\">%s</column>"
-		  "<column name=\"command\">%s</column>"
-		  "<column name=\"cores\">%s</column>"
-		  "</item>",
-		  pid,
-		  user,
-		  command_line ? command_line : "",
-		  cores_str);
-
-	      xfree (command_line);     
-	      xfree (cores_str);
-	    }
-	  
-	  closedir (dirp);
+	  sscanf (dp->d_name, "%lld", &pid);
+	  command_line = commandline_from_pid (pid);
+
+	  if (get_process_owner (&owner, pid) == 0)
+	    user_from_uid (user, sizeof (user), owner);
+	  else
+	    strcpy (user, "?");
+
+	  /* Find CPU cores used by the process.  */
+	  cores = XCNEWVEC (int, num_cores);
+	  task_count = get_cores_used_by_process (pid, cores, num_cores);
+	  cores_str = (char *) xcalloc (task_count, sizeof ("4294967295") + 1);
+
+	  for (i = 0; i < num_cores && task_count > 0; ++i)
+	    if (cores[i])
+	      {
+		char core_str[sizeof ("4294967295")];
+
+		sprintf (core_str, "%d", i);
+		strcat (cores_str, core_str);
+
+		task_count -= cores[i];
+		if (task_count > 0)
+		  strcat (cores_str, ",");
+	      }
+
+	  xfree (cores);
+
+	  buffer_xml_printf
+	    (buffer,
+	     "<item>"
+	     "<column name=\"pid\">%lld</column>"
+	     "<column name=\"user\">%s</column>"
+	     "<column name=\"command\">%s</column>"
+	     "<column name=\"cores\">%s</column>"
+	     "</item>",
+	     pid,
+	     user,
+	     command_line ? command_line : "",
+	     cores_str);
+
+	  xfree (command_line);
+	  xfree (cores_str);
 	}
 
-      buffer_grow_str0 (&buffer, "</osdata>\n");
-      buf = buffer_finish (&buffer);
-      len_avail = strlen (buf);
-    }
-
-  if (offset >= len_avail)
-    {
-      /* Done.  Get rid of the buffer.  */
-      buffer_free (&buffer);
-      buf = NULL;
-      len_avail = 0;
-      return 0;
+      closedir (dirp);
     }
 
-  if (len > len_avail - offset)
-    len = len_avail - offset;
-  memcpy (readbuf, buf + offset, len);
-
-  return len;
+  buffer_grow_str0 (buffer, "</osdata>\n");
 }
 
 /* A simple PID/PGID pair.  */
@@ -1112,7 +924,7 @@ static void
 group_from_gid (char *group, int maxlen, gid_t gid)
 {
   struct group *grentry = getgrgid (gid);
-  
+
   if (grentry)
     {
       strncpy (group, grentry->gr_name, maxlen);
@@ -1124,546 +936,443 @@ group_from_gid (char *group, int maxlen, gid_t gid)
 }
 
 /* Collect data about shared memory recorded in /proc and write it
-   into READBUF.  */
+   into BUFFER.  */
 
-static LONGEST
-linux_xfer_osdata_shm (gdb_byte *readbuf,
-		       ULONGEST offset, ULONGEST len)
+static void
+linux_xfer_osdata_shm (struct buffer *buffer)
 {
-  static const char *buf;
-  static LONGEST len_avail = -1;
-  static struct buffer buffer;
+  buffer_grow_str (buffer, "<osdata type=\"shared memory\">\n");
 
-  if (offset == 0)
+  gdb_file_up fp = gdb_fopen_cloexec ("/proc/sysvipc/shm", "r");
+  if (fp)
     {
-      if (len_avail != -1 && len_avail != 0)
-	buffer_free (&buffer);
-      len_avail = 0;
-      buf = NULL;
-      buffer_init (&buffer);
-      buffer_grow_str (&buffer, "<osdata type=\"shared memory\">\n");
-
-      gdb_file_up fp = gdb_fopen_cloexec ("/proc/sysvipc/shm", "r");
-      if (fp)
-	{
-	  char buf[8192];
+      char buf[8192];
 
-	  do
+      do
+	{
+	  if (fgets (buf, sizeof (buf), fp.get ()))
 	    {
-	      if (fgets (buf, sizeof (buf), fp.get ()))
+	      key_t key;
+	      uid_t uid, cuid;
+	      gid_t gid, cgid;
+	      PID_T cpid, lpid;
+	      int shmid, size, nattch;
+	      TIME_T atime, dtime, ctime;
+	      unsigned int perms;
+	      int items_read;
+
+	      items_read = sscanf (buf,
+				   "%d %d %o %d %lld %lld %d %u %u %u %u %lld %lld %lld",
+				   &key, &shmid, &perms, &size,
+				   &cpid, &lpid,
+				   &nattch,
+				   &uid, &gid, &cuid, &cgid,
+				   &atime, &dtime, &ctime);
+
+	      if (items_read == 14)
 		{
-		  key_t key;
-		  uid_t uid, cuid;
-		  gid_t gid, cgid;
-		  PID_T cpid, lpid;
-		  int shmid, size, nattch;
-		  TIME_T atime, dtime, ctime;
-		  unsigned int perms;
-		  int items_read;
-				  
-		  items_read = sscanf (buf,
-				       "%d %d %o %d %lld %lld %d %u %u %u %u %lld %lld %lld",
-				       &key, &shmid, &perms, &size,
-				       &cpid, &lpid,
-				       &nattch,
-				       &uid, &gid, &cuid, &cgid,
-				       &atime, &dtime, &ctime);
-
-		  if (items_read == 14)
-		    {
-		      char user[UT_NAMESIZE], group[UT_NAMESIZE];
-		      char cuser[UT_NAMESIZE], cgroup[UT_NAMESIZE];
-		      char ccmd[32], lcmd[32];
-		      char atime_str[32], dtime_str[32], ctime_str[32];
-		      
-		      user_from_uid (user, sizeof (user), uid);
-		      group_from_gid (group, sizeof (group), gid);
-		      user_from_uid (cuser, sizeof (cuser), cuid);
-		      group_from_gid (cgroup, sizeof (cgroup), cgid);
-		      
-		      command_from_pid (ccmd, sizeof (ccmd), cpid);
-		      command_from_pid (lcmd, sizeof (lcmd), lpid);
-		      
-		      time_from_time_t (atime_str, sizeof (atime_str), atime);
-		      time_from_time_t (dtime_str, sizeof (dtime_str), dtime);
-		      time_from_time_t (ctime_str, sizeof (ctime_str), ctime);
-		      
-		      buffer_xml_printf (
-		          &buffer,
-			  "<item>"
-			  "<column name=\"key\">%d</column>"
-			  "<column name=\"shmid\">%d</column>"
-			  "<column name=\"permissions\">%o</column>"
-			  "<column name=\"size\">%d</column>"
-			  "<column name=\"creator command\">%s</column>"
-			  "<column name=\"last op. command\">%s</column>"
-			  "<column name=\"num attached\">%d</column>"
-			  "<column name=\"user\">%s</column>"
-			  "<column name=\"group\">%s</column>"
-			  "<column name=\"creator user\">%s</column>"
-			  "<column name=\"creator group\">%s</column>"
-			  "<column name=\"last shmat() time\">%s</column>"
-			  "<column name=\"last shmdt() time\">%s</column>"
-			  "<column name=\"last shmctl() time\">%s</column>"
-			  "</item>",
-			  key,
-			  shmid,
-			  perms,
-			  size,
-			  ccmd,
-			  lcmd,
-			  nattch,
-			  user,
-			  group,
-			  cuser,
-			  cgroup,
-			  atime_str,
-			  dtime_str,
-			  ctime_str);
-		    }
+		  char user[UT_NAMESIZE], group[UT_NAMESIZE];
+		  char cuser[UT_NAMESIZE], cgroup[UT_NAMESIZE];
+		  char ccmd[32], lcmd[32];
+		  char atime_str[32], dtime_str[32], ctime_str[32];
+
+		  user_from_uid (user, sizeof (user), uid);
+		  group_from_gid (group, sizeof (group), gid);
+		  user_from_uid (cuser, sizeof (cuser), cuid);
+		  group_from_gid (cgroup, sizeof (cgroup), cgid);
+
+		  command_from_pid (ccmd, sizeof (ccmd), cpid);
+		  command_from_pid (lcmd, sizeof (lcmd), lpid);
+
+		  time_from_time_t (atime_str, sizeof (atime_str), atime);
+		  time_from_time_t (dtime_str, sizeof (dtime_str), dtime);
+		  time_from_time_t (ctime_str, sizeof (ctime_str), ctime);
+
+		  buffer_xml_printf
+		    (buffer,
+		     "<item>"
+		     "<column name=\"key\">%d</column>"
+		     "<column name=\"shmid\">%d</column>"
+		     "<column name=\"permissions\">%o</column>"
+		     "<column name=\"size\">%d</column>"
+		     "<column name=\"creator command\">%s</column>"
+		     "<column name=\"last op. command\">%s</column>"
+		     "<column name=\"num attached\">%d</column>"
+		     "<column name=\"user\">%s</column>"
+		     "<column name=\"group\">%s</column>"
+		     "<column name=\"creator user\">%s</column>"
+		     "<column name=\"creator group\">%s</column>"
+		     "<column name=\"last shmat() time\">%s</column>"
+		     "<column name=\"last shmdt() time\">%s</column>"
+		     "<column name=\"last shmctl() time\">%s</column>"
+		     "</item>",
+		     key,
+		     shmid,
+		     perms,
+		     size,
+		     ccmd,
+		     lcmd,
+		     nattch,
+		     user,
+		     group,
+		     cuser,
+		     cgroup,
+		     atime_str,
+		     dtime_str,
+		     ctime_str);
 		}
 	    }
-	  while (!feof (fp.get ()));
 	}
-      
-      buffer_grow_str0 (&buffer, "</osdata>\n");
-      buf = buffer_finish (&buffer);
-      len_avail = strlen (buf);
-    }
-
-  if (offset >= len_avail)
-    {
-      /* Done.  Get rid of the buffer.  */
-      buffer_free (&buffer);
-      buf = NULL;
-      len_avail = 0;
-      return 0;
+      while (!feof (fp.get ()));
     }
 
-  if (len > len_avail - offset)
-    len = len_avail - offset;
-  memcpy (readbuf, buf + offset, len);
-
-  return len;
+  buffer_grow_str0 (buffer, "</osdata>\n");
 }
 
 /* Collect data about semaphores recorded in /proc and write it
-   into READBUF.  */
+   into BUFFER.  */
 
-static LONGEST
-linux_xfer_osdata_sem (gdb_byte *readbuf,
-		       ULONGEST offset, ULONGEST len)
+static void
+linux_xfer_osdata_sem (struct buffer *buffer)
 {
-  static const char *buf;
-  static LONGEST len_avail = -1;
-  static struct buffer buffer;
+  buffer_grow_str (buffer, "<osdata type=\"semaphores\">\n");
 
-  if (offset == 0)
+  gdb_file_up fp = gdb_fopen_cloexec ("/proc/sysvipc/sem", "r");
+  if (fp)
     {
-      if (len_avail != -1 && len_avail != 0)
-	buffer_free (&buffer);
-      len_avail = 0;
-      buf = NULL;
-      buffer_init (&buffer);
-      buffer_grow_str (&buffer, "<osdata type=\"semaphores\">\n");
-
-      gdb_file_up fp = gdb_fopen_cloexec ("/proc/sysvipc/sem", "r");
-      if (fp)
+      char buf[8192];
+
+      do
 	{
-	  char buf[8192];
-	  
-	  do
+	  if (fgets (buf, sizeof (buf), fp.get ()))
 	    {
-	      if (fgets (buf, sizeof (buf), fp.get ()))
+	      key_t key;
+	      uid_t uid, cuid;
+	      gid_t gid, cgid;
+	      unsigned int perms, nsems;
+	      int semid;
+	      TIME_T otime, ctime;
+	      int items_read;
+
+	      items_read = sscanf (buf,
+				   "%d %d %o %u %d %d %d %d %lld %lld",
+				   &key, &semid, &perms, &nsems,
+				   &uid, &gid, &cuid, &cgid,
+				   &otime, &ctime);
+
+	      if (items_read == 10)
 		{
-		  key_t key;
-		  uid_t uid, cuid;
-		  gid_t gid, cgid;
-		  unsigned int perms, nsems;
-		  int semid;
-		  TIME_T otime, ctime;
-		  int items_read;
-		  
-		  items_read = sscanf (buf,
-				       "%d %d %o %u %d %d %d %d %lld %lld",
-				       &key, &semid, &perms, &nsems,
-				       &uid, &gid, &cuid, &cgid,
-				       &otime, &ctime);
-		  
-		  if (items_read == 10)
-		    {
-		      char user[UT_NAMESIZE], group[UT_NAMESIZE];
-		      char cuser[UT_NAMESIZE], cgroup[UT_NAMESIZE];
-		      char otime_str[32], ctime_str[32];
-		      
-		      user_from_uid (user, sizeof (user), uid);
-		      group_from_gid (group, sizeof (group), gid);
-		      user_from_uid (cuser, sizeof (cuser), cuid);
-		      group_from_gid (cgroup, sizeof (cgroup), cgid);
-		      
-		      time_from_time_t (otime_str, sizeof (otime_str), otime);
-		      time_from_time_t (ctime_str, sizeof (ctime_str), ctime);
-		      
-		      buffer_xml_printf (
-			  &buffer,
-			  "<item>"
-			  "<column name=\"key\">%d</column>"
-			  "<column name=\"semid\">%d</column>"
-			  "<column name=\"permissions\">%o</column>"
-			  "<column name=\"num semaphores\">%u</column>"
-			  "<column name=\"user\">%s</column>"
-			  "<column name=\"group\">%s</column>"
-			  "<column name=\"creator user\">%s</column>"
-			  "<column name=\"creator group\">%s</column>"
-			  "<column name=\"last semop() time\">%s</column>"
-			  "<column name=\"last semctl() time\">%s</column>"
-			  "</item>",
-			  key,
-			  semid,
-			  perms,
-			  nsems,
-			  user,
-			  group,
-			  cuser,
-			  cgroup,
-			  otime_str,
-			  ctime_str);
-		    }
+		  char user[UT_NAMESIZE], group[UT_NAMESIZE];
+		  char cuser[UT_NAMESIZE], cgroup[UT_NAMESIZE];
+		  char otime_str[32], ctime_str[32];
+
+		  user_from_uid (user, sizeof (user), uid);
+		  group_from_gid (group, sizeof (group), gid);
+		  user_from_uid (cuser, sizeof (cuser), cuid);
+		  group_from_gid (cgroup, sizeof (cgroup), cgid);
+
+		  time_from_time_t (otime_str, sizeof (otime_str), otime);
+		  time_from_time_t (ctime_str, sizeof (ctime_str), ctime);
+
+		  buffer_xml_printf
+		    (buffer,
+		     "<item>"
+		     "<column name=\"key\">%d</column>"
+		     "<column name=\"semid\">%d</column>"
+		     "<column name=\"permissions\">%o</column>"
+		     "<column name=\"num semaphores\">%u</column>"
+		     "<column name=\"user\">%s</column>"
+		     "<column name=\"group\">%s</column>"
+		     "<column name=\"creator user\">%s</column>"
+		     "<column name=\"creator group\">%s</column>"
+		     "<column name=\"last semop() time\">%s</column>"
+		     "<column name=\"last semctl() time\">%s</column>"
+		     "</item>",
+		     key,
+		     semid,
+		     perms,
+		     nsems,
+		     user,
+		     group,
+		     cuser,
+		     cgroup,
+		     otime_str,
+		     ctime_str);
 		}
 	    }
-	  while (!feof (fp.get ()));
 	}
-
-      buffer_grow_str0 (&buffer, "</osdata>\n");
-      buf = buffer_finish (&buffer);
-      len_avail = strlen (buf);
-    }
-
-  if (offset >= len_avail)
-    {
-      /* Done.  Get rid of the buffer.  */
-      buffer_free (&buffer);
-      buf = NULL;
-      len_avail = 0;
-      return 0;
+      while (!feof (fp.get ()));
     }
 
-  if (len > len_avail - offset)
-    len = len_avail - offset;
-  memcpy (readbuf, buf + offset, len);
-
-  return len;
+  buffer_grow_str0 (buffer, "</osdata>\n");
 }
 
 /* Collect data about message queues recorded in /proc and write it
-   into READBUF.  */
+   into BUFFER.  */
 
-static LONGEST
-linux_xfer_osdata_msg (gdb_byte *readbuf,
-		       ULONGEST offset, ULONGEST len)
+static void
+linux_xfer_osdata_msg (struct buffer *buffer)
 {
-  static const char *buf;
-  static LONGEST len_avail = -1;
-  static struct buffer buffer;
+  buffer_grow_str (buffer, "<osdata type=\"message queues\">\n");
 
-  if (offset == 0)
+  gdb_file_up fp = gdb_fopen_cloexec ("/proc/sysvipc/msg", "r");
+  if (fp)
     {
-      if (len_avail != -1 && len_avail != 0)
-	buffer_free (&buffer);
-      len_avail = 0;
-      buf = NULL;
-      buffer_init (&buffer);
-      buffer_grow_str (&buffer, "<osdata type=\"message queues\">\n");
-      
-      gdb_file_up fp = gdb_fopen_cloexec ("/proc/sysvipc/msg", "r");
-      if (fp)
+      char buf[8192];
+
+      do
 	{
-	  char buf[8192];
-	  
-	  do
+	  if (fgets (buf, sizeof (buf), fp.get ()))
 	    {
-	      if (fgets (buf, sizeof (buf), fp.get ()))
+	      key_t key;
+	      PID_T lspid, lrpid;
+	      uid_t uid, cuid;
+	      gid_t gid, cgid;
+	      unsigned int perms, cbytes, qnum;
+	      int msqid;
+	      TIME_T stime, rtime, ctime;
+	      int items_read;
+
+	      items_read = sscanf (buf,
+				   "%d %d %o %u %u %lld %lld %d %d %d %d %lld %lld %lld",
+				   &key, &msqid, &perms, &cbytes, &qnum,
+				   &lspid, &lrpid, &uid, &gid, &cuid, &cgid,
+				   &stime, &rtime, &ctime);
+
+	      if (items_read == 14)
 		{
-		  key_t key;
-		  PID_T lspid, lrpid;
-		  uid_t uid, cuid;
-		  gid_t gid, cgid;
-		  unsigned int perms, cbytes, qnum;
-		  int msqid;
-		  TIME_T stime, rtime, ctime;
-		  int items_read;
-		  
-		  items_read = sscanf (buf,
-				       "%d %d %o %u %u %lld %lld %d %d %d %d %lld %lld %lld",
-				       &key, &msqid, &perms, &cbytes, &qnum,
-				       &lspid, &lrpid, &uid, &gid, &cuid, &cgid,
-				       &stime, &rtime, &ctime);
-		  
-		  if (items_read == 14)
-		    {
-		      char user[UT_NAMESIZE], group[UT_NAMESIZE];
-		      char cuser[UT_NAMESIZE], cgroup[UT_NAMESIZE];
-		      char lscmd[32], lrcmd[32];
-		      char stime_str[32], rtime_str[32], ctime_str[32];
-		      
-		      user_from_uid (user, sizeof (user), uid);
-		      group_from_gid (group, sizeof (group), gid);
-		      user_from_uid (cuser, sizeof (cuser), cuid);
-		      group_from_gid (cgroup, sizeof (cgroup), cgid);
-		      
-		      command_from_pid (lscmd, sizeof (lscmd), lspid);
-		      command_from_pid (lrcmd, sizeof (lrcmd), lrpid);
-		      
-		      time_from_time_t (stime_str, sizeof (stime_str), stime);
-		      time_from_time_t (rtime_str, sizeof (rtime_str), rtime);
-		      time_from_time_t (ctime_str, sizeof (ctime_str), ctime);
-		      
-		      buffer_xml_printf (
-			  &buffer,
-			  "<item>"
-			  "<column name=\"key\">%d</column>"
-			  "<column name=\"msqid\">%d</column>"
-			  "<column name=\"permissions\">%o</column>"
-			  "<column name=\"num used bytes\">%u</column>"
-			  "<column name=\"num messages\">%u</column>"
-			  "<column name=\"last msgsnd() command\">%s</column>"
-			  "<column name=\"last msgrcv() command\">%s</column>"
-			  "<column name=\"user\">%s</column>"
-			  "<column name=\"group\">%s</column>"
-			  "<column name=\"creator user\">%s</column>"
-			  "<column name=\"creator group\">%s</column>"
-			  "<column name=\"last msgsnd() time\">%s</column>"
-			  "<column name=\"last msgrcv() time\">%s</column>"
-			  "<column name=\"last msgctl() time\">%s</column>"
-			  "</item>",
-			  key,
-			  msqid,
-			  perms,
-			  cbytes,
-			  qnum,
-			  lscmd,
-			  lrcmd,
-			  user,
-			  group,
-			  cuser,
-			  cgroup,
-			  stime_str,
-			  rtime_str,
-			  ctime_str);
-		    }
+		  char user[UT_NAMESIZE], group[UT_NAMESIZE];
+		  char cuser[UT_NAMESIZE], cgroup[UT_NAMESIZE];
+		  char lscmd[32], lrcmd[32];
+		  char stime_str[32], rtime_str[32], ctime_str[32];
+
+		  user_from_uid (user, sizeof (user), uid);
+		  group_from_gid (group, sizeof (group), gid);
+		  user_from_uid (cuser, sizeof (cuser), cuid);
+		  group_from_gid (cgroup, sizeof (cgroup), cgid);
+
+		  command_from_pid (lscmd, sizeof (lscmd), lspid);
+		  command_from_pid (lrcmd, sizeof (lrcmd), lrpid);
+
+		  time_from_time_t (stime_str, sizeof (stime_str), stime);
+		  time_from_time_t (rtime_str, sizeof (rtime_str), rtime);
+		  time_from_time_t (ctime_str, sizeof (ctime_str), ctime);
+
+		  buffer_xml_printf
+		    (buffer,
+		     "<item>"
+		     "<column name=\"key\">%d</column>"
+		     "<column name=\"msqid\">%d</column>"
+		     "<column name=\"permissions\">%o</column>"
+		     "<column name=\"num used bytes\">%u</column>"
+		     "<column name=\"num messages\">%u</column>"
+		     "<column name=\"last msgsnd() command\">%s</column>"
+		     "<column name=\"last msgrcv() command\">%s</column>"
+		     "<column name=\"user\">%s</column>"
+		     "<column name=\"group\">%s</column>"
+		     "<column name=\"creator user\">%s</column>"
+		     "<column name=\"creator group\">%s</column>"
+		     "<column name=\"last msgsnd() time\">%s</column>"
+		     "<column name=\"last msgrcv() time\">%s</column>"
+		     "<column name=\"last msgctl() time\">%s</column>"
+		     "</item>",
+		     key,
+		     msqid,
+		     perms,
+		     cbytes,
+		     qnum,
+		     lscmd,
+		     lrcmd,
+		     user,
+		     group,
+		     cuser,
+		     cgroup,
+		     stime_str,
+		     rtime_str,
+		     ctime_str);
 		}
 	    }
-	  while (!feof (fp.get ()));
 	}
-
-      buffer_grow_str0 (&buffer, "</osdata>\n");
-      buf = buffer_finish (&buffer);
-      len_avail = strlen (buf);
-    }
-
-  if (offset >= len_avail)
-    {
-      /* Done.  Get rid of the buffer.  */
-      buffer_free (&buffer);
-      buf = NULL;
-      len_avail = 0;
-      return 0;
+      while (!feof (fp.get ()));
     }
 
-  if (len > len_avail - offset)
-    len = len_avail - offset;
-  memcpy (readbuf, buf + offset, len);
-
-  return len;
+  buffer_grow_str0 (buffer, "</osdata>\n");
 }
 
 /* Collect data about loaded kernel modules and write it into
-   READBUF.  */
+   BUFFER.  */
 
-static LONGEST
-linux_xfer_osdata_modules (gdb_byte *readbuf,
-			   ULONGEST offset, ULONGEST len)
+static void
+linux_xfer_osdata_modules (struct buffer *buffer)
 {
-  static const char *buf;
-  static LONGEST len_avail = -1;
-  static struct buffer buffer;
+  buffer_grow_str (buffer, "<osdata type=\"modules\">\n");
 
-  if (offset == 0)
+  gdb_file_up fp = gdb_fopen_cloexec ("/proc/modules", "r");
+  if (fp)
     {
-      if (len_avail != -1 && len_avail != 0)
-	buffer_free (&buffer);
-      len_avail = 0;
-      buf = NULL;
-      buffer_init (&buffer);
-      buffer_grow_str (&buffer, "<osdata type=\"modules\">\n");
-
-      gdb_file_up fp = gdb_fopen_cloexec ("/proc/modules", "r");
-      if (fp)
+      char buf[8192];
+
+      do
 	{
-	  char buf[8192];
-	  
-	  do
+	  if (fgets (buf, sizeof (buf), fp.get ()))
 	    {
-	      if (fgets (buf, sizeof (buf), fp.get ()))
-		{
-		  char *name, *dependencies, *status, *tmp;
-		  unsigned int size;
-		  unsigned long long address;
-		  int uses;
+	      char *name, *dependencies, *status, *tmp;
+	      unsigned int size;
+	      unsigned long long address;
+	      int uses;
 
-		  name = strtok (buf, " ");
-		  if (name == NULL)
-		    continue;
+	      name = strtok (buf, " ");
+	      if (name == NULL)
+		continue;
 
-		  tmp = strtok (NULL, " ");
-		  if (tmp == NULL)
-		    continue;
-		  if (sscanf (tmp, "%u", &size) != 1)
-		    continue;
+	      tmp = strtok (NULL, " ");
+	      if (tmp == NULL)
+		continue;
+	      if (sscanf (tmp, "%u", &size) != 1)
+		continue;
 
-		  tmp = strtok (NULL, " ");
-		  if (tmp == NULL)
-		    continue;
-		  if (sscanf (tmp, "%d", &uses) != 1)
-		    continue;
+	      tmp = strtok (NULL, " ");
+	      if (tmp == NULL)
+		continue;
+	      if (sscanf (tmp, "%d", &uses) != 1)
+		continue;
 
-		  dependencies = strtok (NULL, " ");
-		  if (dependencies == NULL)
-		    continue;
+	      dependencies = strtok (NULL, " ");
+	      if (dependencies == NULL)
+		continue;
 
-		  status = strtok (NULL, " ");
-		  if (status == NULL)
-		    continue;
+	      status = strtok (NULL, " ");
+	      if (status == NULL)
+		continue;
 
-		  tmp = strtok (NULL, "\n");
-		  if (tmp == NULL)
-		    continue;
-		  if (sscanf (tmp, "%llx", &address) != 1)
-		    continue;
+	      tmp = strtok (NULL, "\n");
+	      if (tmp == NULL)
+		continue;
+	      if (sscanf (tmp, "%llx", &address) != 1)
+		continue;
 
-		  buffer_xml_printf (
-			&buffer,
-			"<item>"
-			"<column name=\"name\">%s</column>"
-			"<column name=\"size\">%u</column>"
-			"<column name=\"num uses\">%d</column>"
-			"<column name=\"dependencies\">%s</column>"
-			"<column name=\"status\">%s</column>"
-			"<column name=\"address\">%llx</column>"
-			"</item>",
-			name,
-			size,
-			uses,
-			dependencies,
-			status,
-			address);
-		}
+	      buffer_xml_printf (buffer,
+				 "<item>"
+				 "<column name=\"name\">%s</column>"
+				 "<column name=\"size\">%u</column>"
+				 "<column name=\"num uses\">%d</column>"
+				 "<column name=\"dependencies\">%s</column>"
+				 "<column name=\"status\">%s</column>"
+				 "<column name=\"address\">%llx</column>"
+				 "</item>",
+				 name,
+				 size,
+				 uses,
+				 dependencies,
+				 status,
+				 address);
 	    }
-	  while (!feof (fp.get ()));
 	}
-
-      buffer_grow_str0 (&buffer, "</osdata>\n");
-      buf = buffer_finish (&buffer);
-      len_avail = strlen (buf);
-    }
-
-  if (offset >= len_avail)
-    {
-      /* Done.  Get rid of the buffer.  */
-      buffer_free (&buffer);
-      buf = NULL;
-      len_avail = 0;
-      return 0;
+      while (!feof (fp.get ()));
     }
 
-  if (len > len_avail - offset)
-    len = len_avail - offset;
-  memcpy (readbuf, buf + offset, len);
-
-  return len;
+  buffer_grow_str0 (buffer, "</osdata>\n");
 }
 
+static void linux_xfer_osdata_info_os_types (struct buffer *buffer);
+
 struct osdata_type {
   const char *type;
   const char *title;
   const char *description;
-  LONGEST (*getter) (gdb_byte *readbuf, ULONGEST offset, ULONGEST len);
+  void (*take_snapshot) (struct buffer *buffer);
+  LONGEST len_avail;
+  struct buffer buffer;
 } osdata_table[] = {
+  { "types", "Types", "Listing of info os types you can list",
+    linux_xfer_osdata_info_os_types, -1 },
   { "cpus", "CPUs", "Listing of all cpus/cores on the system",
-    linux_xfer_osdata_cpus },
+    linux_xfer_osdata_cpus, -1 },
   { "files", "File descriptors", "Listing of all file descriptors",
-    linux_xfer_osdata_fds },
+    linux_xfer_osdata_fds, -1 },
   { "modules", "Kernel modules", "Listing of all loaded kernel modules",
-    linux_xfer_osdata_modules },
+    linux_xfer_osdata_modules, -1 },
   { "msg", "Message queues", "Listing of all message queues",
-    linux_xfer_osdata_msg },
+    linux_xfer_osdata_msg, -1 },
   { "processes", "Processes", "Listing of all processes",
-    linux_xfer_osdata_processes },
+    linux_xfer_osdata_processes, -1 },
   { "procgroups", "Process groups", "Listing of all process groups",
-    linux_xfer_osdata_processgroups },
+    linux_xfer_osdata_processgroups, -1 },
   { "semaphores", "Semaphores", "Listing of all semaphores",
-    linux_xfer_osdata_sem },
+    linux_xfer_osdata_sem, -1 },
   { "shm", "Shared-memory regions", "Listing of all shared-memory regions",
-    linux_xfer_osdata_shm },
+    linux_xfer_osdata_shm, -1 },
   { "sockets", "Sockets", "Listing of all internet-domain sockets",
-    linux_xfer_osdata_isockets },
+    linux_xfer_osdata_isockets, -1 },
   { "threads", "Threads", "Listing of all threads",
-    linux_xfer_osdata_threads },
+  linux_xfer_osdata_threads, -1 },
   { NULL, NULL, NULL }
 };
 
-LONGEST
-linux_common_xfer_osdata (const char *annex, gdb_byte *readbuf,
-			  ULONGEST offset, ULONGEST len)
+/* Collect data about all types info os can show in BUFFER.  */
+
+static void
+linux_xfer_osdata_info_os_types (struct buffer *buffer)
 {
-  if (!annex || *annex == '\0')
-    {
-      static const char *buf;
-      static LONGEST len_avail = -1;
-      static struct buffer buffer;
+  buffer_grow_str (buffer, "<osdata type=\"types\">\n");
+
+  /* Start the below loop at 1, as we do not want to list ourselves.  */
+  for (int i = 1; osdata_table[i].type; ++i)
+    buffer_xml_printf (buffer,
+		       "<item>"
+		       "<column name=\"Type\">%s</column>"
+		       "<column name=\"Description\">%s</column>"
+		       "<column name=\"Title\">%s</column>"
+		       "</item>",
+		       osdata_table[i].type,
+		       osdata_table[i].description,
+		       osdata_table[i].title);
+
+  buffer_grow_str0 (buffer, "</osdata>\n");
+}
 
-      if (offset == 0)
-	{
-	  int i;
 
-	  if (len_avail != -1 && len_avail != 0)
-	    buffer_free (&buffer);
-	  len_avail = 0;
-	  buf = NULL;
-	  buffer_init (&buffer);
-	  buffer_grow_str (&buffer, "<osdata type=\"types\">\n");
-
-	  for (i = 0; osdata_table[i].type; ++i)
-	    buffer_xml_printf (
-			       &buffer,
-			       "<item>"
-			       "<column name=\"Type\">%s</column>"
-			       "<column name=\"Description\">%s</column>"
-			       "<column name=\"Title\">%s</column>"
-			       "</item>",
-			       osdata_table[i].type,
-			       osdata_table[i].description,
-			       osdata_table[i].title);
-
-	  buffer_grow_str0 (&buffer, "</osdata>\n");
-	  buf = buffer_finish (&buffer);
-	  len_avail = strlen (buf);
-	}
+/*  Copies up to LEN bytes in READBUF from offset OFFSET in OSD->BUFFER.
+    If OFFSET is zero, first calls OSD->TAKE_SNAPSHOT.  */
 
-      if (offset >= len_avail)
-	{
-	  /* Done.  Get rid of the buffer.  */
-	  buffer_free (&buffer);
-	  buf = NULL;
-	  len_avail = 0;
-	  return 0;
-	}
+static LONGEST
+common_getter (struct osdata_type *osd,
+	       gdb_byte *readbuf, ULONGEST offset, ULONGEST len)
+{
+  gdb_assert (readbuf);
 
-      if (len > len_avail - offset)
-	len = len_avail - offset;
-      memcpy (readbuf, buf + offset, len);
+  if (offset == 0)
+    {
+      if (osd->len_avail != -1 && osd->len_avail != 0)
+	buffer_free (&osd->buffer);
+      osd->len_avail = 0;
+      buffer_init (&osd->buffer);
+      (osd->take_snapshot) (&osd->buffer);
+      osd->len_avail = strlen (osd->buffer.buffer);
+    }
+  if (offset >= osd->len_avail)
+    {
+      /* Done.  Get rid of the buffer.  */
+      buffer_free (&osd->buffer);
+      osd->len_avail = 0;
+      return 0;
+    }
+  if (len > osd->len_avail - offset)
+    len = osd->len_avail - offset;
+  memcpy (readbuf, osd->buffer.buffer + offset, len);
+
+  return len;
+
+}
 
-      return len;
+LONGEST
+linux_common_xfer_osdata (const char *annex, gdb_byte *readbuf,
+			  ULONGEST offset, ULONGEST len)
+{
+  if (!annex || *annex == '\0')
+    {
+      return common_getter (&osdata_table[0],
+			    readbuf, offset, len);
     }
   else
     {
